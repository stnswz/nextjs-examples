import Head from 'next/head'
import { Typography, Box, LinearProgress, Link } from '@material-ui/core/';
import { List, ListItem, ListItemText } from '@material-ui/core/';
import { makeStyles } from '@material-ui/core'
import InputBar from '../components/InputBar'
import useDataLoadAPI from '../components/hooks/useDataLoadAPI'
import axios, {AxiosResponse} from 'axios';


const useStyles = makeStyles((theme) => ({
  loaderBox: {
    width: '100%',
    height: 10
  },
  inputBox: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: theme.spacing(2),
    marginBottom: theme.spacing(2)

  },
  textField: {
    width: '100%'
  },
  btn: {
    marginLeft: 5,
    whiteSpace: 'nowrap'
  }, 
  resultList: {
    width: 500,
  },
  listItemTextPrimary: {
    fontWeight: 'bold',
  }
}))

const url = 'https://hn.algolia.com/api/v1/search'

export default function Loading(preloadData: any) {
  const classes = useStyles()
  //const [text, setText] = useState('')

  const [{responseData, isLoading, isError}, setSearchText] = useDataLoadAPI(preloadData.data, url, '')

  const startSearch = (text: string) => {
    setSearchText(text)
  }


  return (
    <>
      <Head>
        <title>Loading Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box component='div' className={classes.loaderBox}>
        {isLoading && <LinearProgress />}
      </Box>

      <Typography component="h3" variant="h3">
        Loading Example
      </Typography>

      <InputBar sendData={startSearch} />

      {isError && <div>Loading Error: Daten konnten nicht geladen werden.</div>}

      <List className={classes.resultList}>
        {responseData && responseData.hits.map((item: any) => (
          <ListItem key={item.objectID} alignItems="flex-start" dense>
            <ListItemText
              classes={{primary: classes.listItemTextPrimary}}
              primary={item.author + ' at: ' + item.created_at}
              secondary={<Link href={item.url} target='_blank' rel='noreferer'>{item.title}</Link>}
            />
          </ListItem>
        ))}
      </List>

    </>
  )
}

// This gets called on every request
export async function getServerSideProps() {
  let data = null
  let error = false

  await axios.get(url, {params: {query: ''}})
  .then ((response: AxiosResponse<Record<string, unknown>>) => {
    data = response.data
  })
  .catch((error) => {
    error = true
  })

  // Optional boolean value to allow the page to return a 404 status and page. 
  if (!data || error) {
    return {
      notFound: true
    }
  }

  // Pass data to the page via props
  return { props: { data } }
}