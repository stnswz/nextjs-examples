import Head from 'next/head'
import { useState } from 'react'
import { Typography, Box, LinearProgress } from '@material-ui/core/'
import { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core/'
import PublicIcon from '@material-ui/icons/Public';
import { gql, useQuery, useLazyQuery } from '@apollo/client'
import { makeStyles } from '@material-ui/core'
import { IBasicCountry, ICountry } from '../components/TypeDefinitions'
import CountrySelectBox from '../components/apollo/CountrySelectBox'
import CountryViewBox from '../components/apollo/CountryViewBox'
import client from '../components/apollo/client'

interface ICountriesData {
  countries: Array<IBasicCountry>
}

interface ICountryData {
  country: ICountry
}

interface ICountryVars {
  code: string
}

const useStyles = makeStyles((theme) => ({
  loaderBox: {
    width: '100%',
    height: 10
  }, 
  title: {
    marginBottom: theme.spacing(2),
  }
}))

const GET_Countries = gql`
  query Countries {
    countries {
      name
      code
      emoji
    }
  }
`;

const GET_Country = gql`
  query Country($code: ID!) {
    country(code: $code) {
      name
      code
    	capital
    	currency
    	emoji
    	emojiU
    	languages {
        code
        name
        native
      }
    	states {
        code
        name
      }
    	continent {
        name
        countries {
          code
          name
        }
      }
    }
  }
`;

export default function Apollo( preloadedData: any) {
  const classes = useStyles()

  const selectCountries = preloadedData as ICountriesData

  //const { loading, error, data: selectCountries } = useQuery<ICountriesData>(GET_Countries)
  const [startLoading, { loading: countryLoading, error: countryError, data: countryData }] = useLazyQuery<ICountryData, ICountryVars>(
    GET_Country, 
    {
    // fetchPolicy: "network-only"
    }
  );

  const countrySelected = (code: string): void => {
    startLoading({ variables: { code: code } })
  }

  return (
    <>
      <Head>
        <title>Apollo Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box component='div' className={classes.loaderBox}>
        {/*(loading || countryLoading) && <LinearProgress />*/}
        {countryLoading && <LinearProgress />}
      </Box>
      
      <Typography component="h3" variant="h3" className={classes.title}>
        Apollo Example
      </Typography>

      {/*error && <div>Error! {error.message}</div>*/}
      {countryError && <div>Error! {countryError.message}</div>}

      <CountrySelectBox countries={selectCountries.countries} countrySelected={countrySelected} />

      {countryData && <CountryViewBox {...countryData.country} />}
    </>
  )
}

// This gets called on every request
export async function getServerSideProps() {

  const { error, data } = await client.query<ICountriesData>({
    query: GET_Countries
  });

  // Optional boolean value to allow the page to return a 404 status and page. 
  if (!data || error) {
    return {
      notFound: true
    }
  }

  // Pass data to the page via props
  return { 
    props: { 
      countries: data.countries 
    }
  }
}